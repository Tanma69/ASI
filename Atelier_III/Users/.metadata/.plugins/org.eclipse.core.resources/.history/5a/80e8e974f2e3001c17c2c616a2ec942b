package com.sp.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.springframework.boot.autoconfigure.security.SecurityProperties.User;
import org.springframework.stereotype.Service;

import com.sp.model.*;

@Service
public class UsersDAO {
	private List<User> liste_user;

	public CardDAO() {
		liste_user = new ArrayList<User>();
		createUsers();

	}

	private void createUsers() {
		
		liste_user.add( new User("firstname","lastname","username", "password"));
		
	}

	public List<User> getallUsers() {
		return this.liste_user;
	}
	
	public List<Card> getAvailableCards() {
		List<Card> available_cards = new ArrayList<Card>();
		for (Card myCard : getCardList()) {
			if (myCard.getUser_id() == 1) {
				available_cards.add(myCard);
			}
		}
		return available_cards;
	}
	
	public Card getCardByName(String name){
		for (Card myCard : simulateCardBDD) {
			if(myCard.getName().equals(name)){
				return myCard;
			}
		}
		return null;
	}
	
	public Card getCardByName(String name, List<Card> myList){
		for (Card myCard : myList) {
			if(myCard.getName().equals(name)){
				return myCard;
			}
		}
		return null;
	}
	
	public Card getRandomCard(){
		int myCard = randomGenerator.nextInt(this.simulateCardBDD.size());
		return this.simulateCardBDD.get(myCard);
	}

	public Card getCardById(int card_id) {
		for (Card myCard : simulateCardBDD) {
			if(myCard.getCard_id() == card_id){
				return myCard;
			}
		}
		return null;
	}
	
	public Card addCard(String family_src,String family_name,String img_src, String name, String description, int hp, int energy, int attack, int defense, String affinity, int price, int user_id) {
		Card myCard = new Card(family_src, family_name, img_src, name, description, hp, energy, attack, defense, affinity, price, user_id);
		simulateCardBDD.add(myCard);
		return myCard;
	}
	
	private boolean hasEnoughMoney(int card_id, int user_id) {
		int money_amount = 1000; //callUserMoney(user_id);
		int card_price = getCardById(card_id).getPrice();
		return money_amount > card_price;
	}
	
	private void updateUserMoney(int card_id, int user_id) {
		int new_amount = 1000 - getCardById(card_id).getPrice(); // 1000 = callUserMoney(user_id);
		//user.setMoney(new_amount)
	}
	
	public void buyACard(int card_id, int new_user_id) {
		if (hasEnoughMoney(card_id, new_user_id)) {
			getCardById(card_id).setUser_id(new_user_id);
			//call cards_buy_ok();
			updateUserMoney(card_id, new_user_id);
		} else {
			//call cards_buy_non_ok();
		}
	}
	
	public void sellACard(int card_id) {
		getCardById(card_id).setUser_id(1);
		// call cards_sell_ok();
		
		// call users for moneyUpdate
	}

}
